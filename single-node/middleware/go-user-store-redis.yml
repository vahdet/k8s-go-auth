### Service
apiVersion: v1
kind: Service
metadata:
  name: go-user-store-service
  labels:
    app: goUserStore
    environment: dev
    tier: middleware
spec:
  # Select any Pod with app label is 'goUserStore' ... 
  # .. AND environment label is 'dev'
  selector: 
    app: goUserStore
    environment: dev
    tier: middleware
  ports:
  - name: grpc
    protocol: TCP     # Kubernetes Services support TCP and UDP for protocols. The default is TCP
    port: 5300        # A Service can map an incoming port to any targetPort. By default the targetPort will be set to the same value as the port field.
    targetPort: 5300  # The port on which the pods work on. 5300 is the default port for gRPC
  type: LoadBalancer  # 'type: LoadBalancer' means that the Service uses the default load balancer of your cloud provider.
---
### Deployment (Pod definition is also embedded in)
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: go-user-store-deployment
spec:
  replicas: 1        # That's what makes this a single-node definition!!
  # following selector field defines how the Deployment finds which Pods to manage. Just like the service
  selector:
    matchLabels:
      app: goUserStore
      environment: dev
      tier: middleware
  template:
    metadata:
      labels:
        app: goUserStore
        environment: dev
        tier: middleware
    spec: # template: spec field, indicates that the Pods run one container
      containers:
      - name: go-user-store
        image: vahdet/go-user-store-redis:latest
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: USER_STORE_REDIS_URL
          value: 127.0.0.1:6379
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the master
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below:
          # value: env          
        ports:
          # List of ports to expose from the container. 
          # Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational.
          # Not specifying a port here DOES NOT prevent that port from being exposed. 
          # Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. 
          # Cannot be updated.
        - containerPort: 5300 # Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
